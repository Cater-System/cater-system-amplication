/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDeliveryArgs } from "./CreateDeliveryArgs";
import { UpdateDeliveryArgs } from "./UpdateDeliveryArgs";
import { DeleteDeliveryArgs } from "./DeleteDeliveryArgs";
import { DeliveryFindManyArgs } from "./DeliveryFindManyArgs";
import { DeliveryFindUniqueArgs } from "./DeliveryFindUniqueArgs";
import { Delivery } from "./Delivery";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { DeliveryService } from "../delivery.service";

@graphql.Resolver(() => Delivery)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DeliveryResolverBase {
  constructor(
    protected readonly service: DeliveryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Delivery",
    action: "read",
    possession: "any",
  })
  async _deliveriesMeta(
    @graphql.Args() args: DeliveryFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Delivery])
  @nestAccessControl.UseRoles({
    resource: "Delivery",
    action: "read",
    possession: "any",
  })
  async deliveries(
    @graphql.Args() args: DeliveryFindManyArgs
  ): Promise<Delivery[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Delivery, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Delivery",
    action: "read",
    possession: "own",
  })
  async delivery(
    @graphql.Args() args: DeliveryFindUniqueArgs
  ): Promise<Delivery | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Delivery)
  @nestAccessControl.UseRoles({
    resource: "Delivery",
    action: "create",
    possession: "any",
  })
  async createDelivery(
    @graphql.Args() args: CreateDeliveryArgs
  ): Promise<Delivery> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Delivery)
  @nestAccessControl.UseRoles({
    resource: "Delivery",
    action: "update",
    possession: "any",
  })
  async updateDelivery(
    @graphql.Args() args: UpdateDeliveryArgs
  ): Promise<Delivery | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Delivery)
  @nestAccessControl.UseRoles({
    resource: "Delivery",
    action: "delete",
    possession: "any",
  })
  async deleteDelivery(
    @graphql.Args() args: DeleteDeliveryArgs
  ): Promise<Delivery | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order])
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async orders(
    @graphql.Parent() parent: Delivery,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
