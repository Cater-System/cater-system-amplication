/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProductAttributeArgs } from "./CreateProductAttributeArgs";
import { UpdateProductAttributeArgs } from "./UpdateProductAttributeArgs";
import { DeleteProductAttributeArgs } from "./DeleteProductAttributeArgs";
import { ProductAttributeFindManyArgs } from "./ProductAttributeFindManyArgs";
import { ProductAttributeFindUniqueArgs } from "./ProductAttributeFindUniqueArgs";
import { ProductAttribute } from "./ProductAttribute";
import { ProductAttributeItemFindManyArgs } from "../../productAttributeItem/base/ProductAttributeItemFindManyArgs";
import { ProductAttributeItem } from "../../productAttributeItem/base/ProductAttributeItem";
import { Product } from "../../product/base/Product";
import { ProductAttributeService } from "../productAttribute.service";

@graphql.Resolver(() => ProductAttribute)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProductAttributeResolverBase {
  constructor(
    protected readonly service: ProductAttributeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductAttribute",
    action: "read",
    possession: "any",
  })
  async _productAttributesMeta(
    @graphql.Args() args: ProductAttributeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductAttribute])
  @nestAccessControl.UseRoles({
    resource: "ProductAttribute",
    action: "read",
    possession: "any",
  })
  async productAttributes(
    @graphql.Args() args: ProductAttributeFindManyArgs
  ): Promise<ProductAttribute[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductAttribute, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductAttribute",
    action: "read",
    possession: "own",
  })
  async productAttribute(
    @graphql.Args() args: ProductAttributeFindUniqueArgs
  ): Promise<ProductAttribute | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductAttribute)
  @nestAccessControl.UseRoles({
    resource: "ProductAttribute",
    action: "create",
    possession: "any",
  })
  async createProductAttribute(
    @graphql.Args() args: CreateProductAttributeArgs
  ): Promise<ProductAttribute> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductAttribute)
  @nestAccessControl.UseRoles({
    resource: "ProductAttribute",
    action: "update",
    possession: "any",
  })
  async updateProductAttribute(
    @graphql.Args() args: UpdateProductAttributeArgs
  ): Promise<ProductAttribute | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductAttribute)
  @nestAccessControl.UseRoles({
    resource: "ProductAttribute",
    action: "delete",
    possession: "any",
  })
  async deleteProductAttribute(
    @graphql.Args() args: DeleteProductAttributeArgs
  ): Promise<ProductAttribute | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductAttributeItem])
  @nestAccessControl.UseRoles({
    resource: "ProductAttributeItem",
    action: "read",
    possession: "any",
  })
  async productAttributeItems(
    @graphql.Parent() parent: ProductAttribute,
    @graphql.Args() args: ProductAttributeItemFindManyArgs
  ): Promise<ProductAttributeItem[]> {
    const results = await this.service.findProductAttributeItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async product(
    @graphql.Parent() parent: ProductAttribute
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
