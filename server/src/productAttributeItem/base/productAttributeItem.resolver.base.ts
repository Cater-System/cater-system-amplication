/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProductAttributeItemArgs } from "./CreateProductAttributeItemArgs";
import { UpdateProductAttributeItemArgs } from "./UpdateProductAttributeItemArgs";
import { DeleteProductAttributeItemArgs } from "./DeleteProductAttributeItemArgs";
import { ProductAttributeItemFindManyArgs } from "./ProductAttributeItemFindManyArgs";
import { ProductAttributeItemFindUniqueArgs } from "./ProductAttributeItemFindUniqueArgs";
import { ProductAttributeItem } from "./ProductAttributeItem";
import { ProductAttribute } from "../../productAttribute/base/ProductAttribute";
import { ProductAttributeItemService } from "../productAttributeItem.service";

@graphql.Resolver(() => ProductAttributeItem)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProductAttributeItemResolverBase {
  constructor(
    protected readonly service: ProductAttributeItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductAttributeItem",
    action: "read",
    possession: "any",
  })
  async _productAttributeItemsMeta(
    @graphql.Args() args: ProductAttributeItemFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductAttributeItem])
  @nestAccessControl.UseRoles({
    resource: "ProductAttributeItem",
    action: "read",
    possession: "any",
  })
  async productAttributeItems(
    @graphql.Args() args: ProductAttributeItemFindManyArgs
  ): Promise<ProductAttributeItem[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductAttributeItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductAttributeItem",
    action: "read",
    possession: "own",
  })
  async productAttributeItem(
    @graphql.Args() args: ProductAttributeItemFindUniqueArgs
  ): Promise<ProductAttributeItem | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductAttributeItem)
  @nestAccessControl.UseRoles({
    resource: "ProductAttributeItem",
    action: "create",
    possession: "any",
  })
  async createProductAttributeItem(
    @graphql.Args() args: CreateProductAttributeItemArgs
  ): Promise<ProductAttributeItem> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        productAttribute: {
          connect: args.data.productAttribute,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductAttributeItem)
  @nestAccessControl.UseRoles({
    resource: "ProductAttributeItem",
    action: "update",
    possession: "any",
  })
  async updateProductAttributeItem(
    @graphql.Args() args: UpdateProductAttributeItemArgs
  ): Promise<ProductAttributeItem | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          productAttribute: {
            connect: args.data.productAttribute,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductAttributeItem)
  @nestAccessControl.UseRoles({
    resource: "ProductAttributeItem",
    action: "delete",
    possession: "any",
  })
  async deleteProductAttributeItem(
    @graphql.Args() args: DeleteProductAttributeItemArgs
  ): Promise<ProductAttributeItem | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductAttribute, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductAttribute",
    action: "read",
    possession: "any",
  })
  async productAttribute(
    @graphql.Parent() parent: ProductAttributeItem
  ): Promise<ProductAttribute | null> {
    const result = await this.service.getProductAttribute(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
